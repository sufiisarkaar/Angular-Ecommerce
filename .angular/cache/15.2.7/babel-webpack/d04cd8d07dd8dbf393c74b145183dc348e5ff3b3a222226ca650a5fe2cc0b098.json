{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport class SellerGuard {\n  constructor(router) {\n    this.router = router;\n  }\n  canActivate(route, state) {\n    let seller = localStorage.getItem(\"seller\");\n    let sellerID = seller && JSON.parse(seller).data.id;\n    if (sellerID) {\n      return true;\n      returnthis.router.navigateByUrl(\"seller_dashboard\");\n    }\n    this.router.navigateByUrl(\"seller\");\n    return false;\n  }\n}\nSellerGuard.ɵfac = function SellerGuard_Factory(t) {\n  return new (t || SellerGuard)(i0.ɵɵinject(i1.Router));\n};\nSellerGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: SellerGuard,\n  factory: SellerGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AAOA,OAAM,MAAOA,WAAW;EACtBC,YAAoBC,MAAa;IAAb,WAAM,GAANA,MAAM;EAE1B;EAEAC,WAAW,CACTC,KAA6B,EAC7BC,KAA0B;IAExB,IAAIC,MAAM,GAAGC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;IAC3C,IAAIC,QAAQ,GAAGH,MAAM,IAAII,IAAI,CAACC,KAAK,CAACL,MAAM,CAAC,CAACM,IAAI,CAACC,EAAE;IACnD,IAAGJ,QAAQ,EAAC;MACV,OAAO,IAAI;MACXK,UAAU,CAACZ,MAAM,CAACa,aAAa,CAAC,kBAAkB,CAAC;;IAIrD,IAAI,CAACb,MAAM,CAACa,aAAa,CAAC,QAAQ,CAAC;IACnC,OAAO,KAAK;EAChB;;AAnBWf,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAgB,SAAXhB,WAAW;EAAAiB,YAFV;AAAM","names":["SellerGuard","constructor","router","canActivate","route","state","seller","localStorage","getItem","sellerID","JSON","parse","data","id","returnthis","navigateByUrl","factory","providedIn"],"sourceRoot":"","sources":["E:\\AngularWithLaravelAPI\\AngularFrontEnd\\src\\app\\Auth\\seller.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SellerGuard implements CanActivate {\n  constructor(private router:Router){\n\n  }\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n\n      let seller = localStorage.getItem(\"seller\");\n      let sellerID = seller && JSON.parse(seller).data.id;\n      if(sellerID){\n        return true;\n        returnthis.router.navigateByUrl(\"seller_dashboard\")\n\n      }\n\n      this.router.navigateByUrl(\"seller\")\n      return false;\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}