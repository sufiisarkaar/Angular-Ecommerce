{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./item-service.service\";\nimport * as i3 from \"./toaster.service\";\nimport * as i4 from \"@angular/router\";\nexport class UsersService {\n  constructor(http, itemSer, toaster, router) {\n    this.http = http;\n    this.itemSer = itemSer;\n    this.toaster = toaster;\n    this.router = router;\n  }\n  userSignup(data) {\n    return this.http.post(\"http://localhost:8000/api/userSignup\", data);\n  }\n  userLogin(data) {\n    this.http.post(\"http://localhost:8000/api/userLogin\", data, {\n      observe: 'response'\n    }).subscribe(result => {\n      if (!result.body.error) {\n        localStorage.setItem('user', JSON.stringify(result.body));\n        this.toaster.LoginSuccess(result.body.success);\n        setTimeout(() => {\n          this.router.navigateByUrl(\"\");\n        }, 2000);\n        this.cartToDb();\n        this.itemSer.ActiveUser.emit(true);\n      } else {\n        this.toaster.LoginFail(result.body.error);\n      }\n    });\n  }\n  cartToDb() {\n    let data = localStorage.getItem(\"MyItems\");\n    if (data) {\n      let cartDataList = JSON.parse(data);\n      let user = localStorage.getItem('user');\n      let userId = user && JSON.parse(user).data.id;\n      cartDataList.forEach(product => {\n        let cartData = {\n          ...product,\n          user_id: userId\n        };\n        this.itemSer.addToCart(cartData).subscribe(res => {\n          localStorage.removeItem(\"MyItems\");\n          this.itemSer.PendingdataTruncateToDb();\n        });\n      });\n    }\n  }\n  myOrdersLocalToDB() {\n    let MyOrder = localStorage.getItem(\"myOrderLocal\");\n    let MyOrderData = MyOrder && JSON.parse(MyOrder);\n    if (MyOrderData) {\n      let user = localStorage.getItem('user');\n      let userId = user && JSON.parse(user).data.id;\n      MyOrderData.forEach(data => {\n        let finalMyOrders = {\n          ...data,\n          user_id: userId\n        };\n        this.http.post(\"http://localhost:8000/api/postMyOrder\", data).subscribe(res => {\n          console.log(\"success local to db\", res);\n          if (res.success) {\n            localStorage.removeItem(\"myOr\");\n          }\n        });\n      });\n    }\n  }\n  updateProfile(UserId, NewData) {\n    return this.http.put(\"http://localhost:8000/api/editProfile/\" + UserId, NewData);\n  }\n  getProfile(UserId) {\n    return this.http.get(\"http://localhost:8000/api/getProfile/\" + UserId);\n  }\n  placeOrder(data) {\n    return this.http.post(\"http://localhost:8000/api/postMyOrder\", data);\n  }\n  getMyOrders(id) {\n    return this.http.get(\"http://localhost:8000/api/getMyOrder/\" + id);\n  }\n}\nUsersService.ɵfac = function UsersService_Factory(t) {\n  return new (t || UsersService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ItemServiceService), i0.ɵɵinject(i3.ToasterService), i0.ɵɵinject(i4.Router));\n};\nUsersService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UsersService,\n  factory: UsersService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["UsersService","constructor","http","itemSer","toaster","router","userSignup","data","post","userLogin","observe","subscribe","result","body","error","localStorage","setItem","JSON","stringify","LoginSuccess","success","setTimeout","navigateByUrl","cartToDb","ActiveUser","emit","LoginFail","getItem","cartDataList","parse","user","userId","id","forEach","product","cartData","user_id","addToCart","res","removeItem","PendingdataTruncateToDb","myOrdersLocalToDB","MyOrder","MyOrderData","finalMyOrders","console","log","updateProfile","UserId","NewData","put","getProfile","get","placeOrder","getMyOrders","factory","providedIn"],"sourceRoot":"","sources":["E:\\AngularWithLaravelAPI\\AngularFrontEnd\\src\\app\\services\\users.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { ItemServiceService } from './item-service.service';\nimport { ToasterService } from './toaster.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UsersService {\n\n  constructor(private http: HttpClient, private itemSer: ItemServiceService, private toaster:ToasterService, private router:Router) {\n\n  }\n\n  userSignup(data: any) {\n    return this.http.post(\"http://localhost:8000/api/userSignup\", data);\n  }\n\n  userLogin(data: any) {\n    this.http.post(\"http://localhost:8000/api/userLogin\", data, { observe: 'response' }).subscribe((result:any) => {\n      if (!result.body.error) {\n        localStorage.setItem('user', JSON.stringify(result.body));\n        this.toaster.LoginSuccess(result.body.success);\n        setTimeout(()=>{\n          this.router.navigateByUrl(\"\");\n        },2000);\n        this.cartToDb();\n    this.itemSer.ActiveUser.emit(true);\n\n\n      }else{\n        this.toaster.LoginFail(result.body.error);\n      }\n    });\n  }\n\n\n  cartToDb() {\n    let data = localStorage.getItem(\"MyItems\");\n    if (data) {\n      let cartDataList = JSON.parse(data);\n      let user: any = localStorage.getItem('user');\n      let userId = user && JSON.parse(user).data.id;\n      cartDataList.forEach((product: any) => {\n        let cartData = {\n          ...product,\n          user_id: userId,\n        }\n        this.itemSer.addToCart(cartData).subscribe((res: any) => {\n          localStorage.removeItem(\"MyItems\");\n          this.itemSer.PendingdataTruncateToDb();\n        })\n      });\n\n    }\n\n\n  }\n\n\n\n  myOrdersLocalToDB(){\n    let MyOrder = localStorage.getItem(\"myOrderLocal\");\n    let MyOrderData = MyOrder && JSON.parse(MyOrder);\n    if(MyOrderData){\n      let user: any = localStorage.getItem('user');\n      let userId = user && JSON.parse(user).data.id;\n      MyOrderData.forEach((data:any)=>{\n        let finalMyOrders = {\n          ...data,\n          user_id : userId,\n        }\n        this.http.post(\"http://localhost:8000/api/postMyOrder\",data).subscribe((res:any)=>{\n          console.log(\"success local to db\" , res);\n          if(res.success){\n            localStorage.removeItem(\"myOr\")\n          }\n\n        })\n      })\n    }\n  }\n\n\n  updateProfile(UserId: any, NewData: any) {\n    return this.http.put(\"http://localhost:8000/api/editProfile/\" + UserId, NewData);\n  }\n\n  getProfile(UserId: any) {\n    return this.http.get(\"http://localhost:8000/api/getProfile/\" + UserId);\n  }\n\nplaceOrder(data:any){\n return this.http.post(\"http://localhost:8000/api/postMyOrder\",data);\n}\n\ngetMyOrders(id:any){\n  return this.http.get(\"http://localhost:8000/api/getMyOrder/\"+id);\n}\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}