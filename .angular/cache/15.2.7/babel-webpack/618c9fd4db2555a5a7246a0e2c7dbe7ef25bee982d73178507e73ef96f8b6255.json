{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet ContentComponent = class ContentComponent {\n  constructor(IS, userS, toaster, sellerSer) {\n    this.IS = IS;\n    this.userS = userS;\n    this.toaster = toaster;\n    this.sellerSer = sellerSer;\n  }\n  ngOnInit() {\n    this.checkActiveAdded();\n    this.getItems();\n    this.emitUser();\n  }\n  getItems() {\n    this.IS.getItems().subscribe(res => {\n      this.itemList = res.Result;\n    });\n  }\n  AddToCart(item) {\n    // Call API to add item to cart if user is logged in\n    let user = localStorage.getItem(\"user\");\n    let user_id = user && JSON.parse(user).data.id;\n    let addData = {\n      ...item,\n      user_id\n    };\n    if (this.ActiveIdMulti?.includes(item.id)) {\n      this.toaster.AddToCartFail(item.item_name);\n    } else {\n      if (user) {\n        this.IS.addToCart(addData).subscribe(response => {\n          this.ActiveId = response.data.item_id;\n          this.cartData();\n          this.toaster.AddToCartSuccess(item.item_name);\n        }, err => {\n          this.toaster.AddToCartFail(item.item_name);\n        });\n      }\n      if (!localStorage.getItem(\"user\")) {\n        // Retrieve existing data from LocalStorage or create a new empty array\n        let existingData = JSON.parse(localStorage.getItem(\"MyItems\") || \"[]\");\n        // Add the new object to the existing array\n        existingData.push(item);\n        // Save the updated array to LocalStorage\n        localStorage.setItem(\"MyItems\", JSON.stringify(existingData));\n        this.IS.cardData.emit(existingData);\n        this.toaster.AddToCartSuccess(item.item_name);\n        this.IS.PendingdataAddedLocalToDb(item).subscribe(res => {\n          console.log(\"resssssss\", res);\n        });\n      }\n    }\n    // Retrieve the data from local storage\n    let data = JSON.parse(localStorage.getItem('ActiveAdded') || \"[]\");\n    data.push(item.id);\n    // Store the updated array back to local storage\n    localStorage.setItem('ActiveAdded', JSON.stringify(data));\n    this.ActiveIdMulti = data;\n  }\n  cartData() {\n    let user = localStorage.getItem('user');\n    let userId = user && JSON.parse(user).data.id;\n    this.IS.getCartDataByUserID(userId).subscribe(res => {\n      this.IS.cardData.emit(res.data);\n    });\n  }\n  emitUser() {\n    let user = localStorage.getItem(\"user\");\n    let userVerify = user && JSON.parse(user).data.id;\n    if (userVerify) {\n      this.IS.ActiveUser.emit(true);\n    }\n  }\n  checkActiveAdded() {\n    let data = JSON.parse(localStorage.getItem('ActiveAdded') || \"[]\");\n    // Store the updated array back to local storage\n    localStorage.setItem('ActiveAdded', JSON.stringify(data));\n    this.ActiveIdMulti = data;\n  }\n  checkSeller() {\n    this.sellerSer.sellerActive.subscribe(res => {\n      this.sellerActive = res;\n    });\n  }\n};\nContentComponent = __decorate([Component({\n  selector: 'app-content',\n  templateUrl: './content.component.html',\n  styleUrls: ['./content.component.scss']\n})], ContentComponent);\nexport { ContentComponent };","map":{"version":3,"mappings":"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","names":["Component","ContentComponent","constructor","IS","userS","toaster","sellerSer","ngOnInit","checkActiveAdded","getItems","emitUser","subscribe","res","itemList","Result","AddToCart","item","user","localStorage","getItem","user_id","JSON","parse","data","id","addData","ActiveIdMulti","includes","AddToCartFail","item_name","addToCart","response","ActiveId","item_id","cartData","AddToCartSuccess","err","existingData","push","setItem","stringify","cardData","emit","PendingdataAddedLocalToDb","console","log","userId","getCartDataByUserID","userVerify","ActiveUser","checkSeller","sellerActive","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["E:\\AngularWithLaravelAPI\\AngularFrontEnd\\src\\app\\components\\content\\content.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ItemServiceService } from 'src/app/services/item-service.service';\nimport { ToasterService } from 'src/app/services/toaster.service';\nimport { UsersService } from 'src/app/services/users.service';\n\n@Component({\n  selector: 'app-content',\n  templateUrl: './content.component.html',\n  styleUrls: ['./content.component.scss']\n})\nexport class ContentComponent implements OnInit {\n\n  itemList: any;\n  IsLogin: any;\n  ActiveId : any;\n  ActiveIdMulti:any;\n  constructor(private IS: ItemServiceService, private userS: UsersService, private toaster:ToasterService, private sellerSer:Sell) { }\n\n  ngOnInit() {\nthis.checkActiveAdded();\n    this.getItems();\n    this.emitUser();\n  }\n\n  getItems() {\n    this.IS.getItems().subscribe((res: any) => {\n      this.itemList = res.Result;\n    })\n  }\n\n\n  AddToCart(item: any) {\n    // Call API to add item to cart if user is logged in\n    let user = localStorage.getItem(\"user\")\n    let user_id = user && JSON.parse(user).data.id;\n    let addData = {\n      ...item,\n      user_id\n    }\nif(this.ActiveIdMulti?.includes(item.id)){\n  this.toaster.AddToCartFail(item.item_name);\n}else{\n\n    if(user){\n\n\n      this.IS.addToCart(addData).subscribe((response:any) => {\n        this.ActiveId = response.data.item_id;\n        this.cartData();\n        this.toaster.AddToCartSuccess(item.item_name);\n\n      },(err)=>{\n        this.toaster.AddToCartFail(item.item_name);\n      });\n    }\n    if (!localStorage.getItem(\"user\")) {\n      // Retrieve existing data from LocalStorage or create a new empty array\n      let existingData: any = JSON.parse(localStorage.getItem(\"MyItems\") || \"[]\") as string[];\n\n      // Add the new object to the existing array\n      existingData.push(item);\n\n      // Save the updated array to LocalStorage\n      localStorage.setItem(\"MyItems\", JSON.stringify(existingData));\n      this.IS.cardData.emit(existingData)\n      this.toaster.AddToCartSuccess(item.item_name);\n\n      this.IS.PendingdataAddedLocalToDb(item).subscribe((res: any) => {\nconsole.log(\"resssssss\",res);\n\n\n      })\n    }\n  }\n\n     // Retrieve the data from local storage\n     let data:any = JSON.parse(localStorage.getItem('ActiveAdded') || \"[]\");\ndata.push(item.id);\n// Store the updated array back to local storage\nlocalStorage.setItem('ActiveAdded', JSON.stringify(data));\nthis.ActiveIdMulti = data ;\n  }\n\n\n\n\n  cartData() {\n    let user = localStorage.getItem('user');\n    let userId = user && JSON.parse(user).data.id;\n    this.IS.getCartDataByUserID(userId).subscribe((res: any) => {\n      this.IS.cardData.emit(res.data);\n    })\n  }\n\n\n  emitUser() {\n    let user = localStorage.getItem(\"user\");\n    let userVerify = user && JSON.parse(user).data.id\n    if(userVerify){\n   this.IS.ActiveUser.emit(true);\n  }\n  }\n\n\ncheckActiveAdded(){\n  let data:any = JSON.parse(localStorage.getItem('ActiveAdded') || \"[]\");\n\n  // Store the updated array back to local storage\n  localStorage.setItem('ActiveAdded', JSON.stringify(data));\n  this.ActiveIdMulti = data ;\n}\n\n\ncheckSeller(){\n\n  this.sellerSer.sellerActive.subscribe((res:any)=>{\nthis.sellerActive = res;\n  })\n}\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}